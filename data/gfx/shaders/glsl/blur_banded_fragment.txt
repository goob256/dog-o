uniform sampler2D tex;

uniform float offset_x;
uniform float offset_y;

varying vec4 colour;
varying vec2 texcoord;

void main()
{
	vec4 pix1 = texture2D(tex, vec2(texcoord.x+offset_x, texcoord.y));
	vec4 pix2 = texture2D(tex, vec2(texcoord.x-offset_x, texcoord.y));
	vec4 pix3 = texture2D(tex, vec2(texcoord.x, texcoord.y+offset_y));
	vec4 pix4 = texture2D(tex, vec2(texcoord.x, texcoord.y-offset_y));

	vec4 result = ((pix1 + pix2 + pix3 + pix4) / 4.0) * colour;

	if (result.a <= 0.1) {
		discard;
	}
	else {
		const int nbands_i = 4;
		const int inv = 100 / nbands_i;

		int r = int(result.r * 100.0);
		r /= inv;
		r = int(min(float(nbands_i), float(r)+1.0));
		result.r = float(r) / 100.0 * float(inv);

		int g = int(result.g * 100.0);
		g /= inv;
		g = int(min(float(nbands_i), float(g)+1.0));
		result.g = float(g) / 100.0 * float(inv);

		int b = int(result.b * 100.0);
		b /= inv;
		b = int(min(float(nbands_i), float(b)+1.0));
		result.b = float(b) / 100.0 * float(inv);

		int a = int(result.a * 100.0);
		a /= inv;
		a = int(min(float(nbands_i), float(a)+1.0));
		result.a = float(a) / 100.0 * float(inv);

		gl_FragColor = result;
	}
}
